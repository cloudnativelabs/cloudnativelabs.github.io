<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://cloudnativelabs.github.io/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>info@cloudnativelabs.net (Cloudnative Labs)</managingEditor>
    <webMaster>info@cloudnativelabs.net (Cloudnative Labs)</webMaster>
    <lastBuildDate>Mon, 22 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cloudnativelabs.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes pod networking and beyond with BGP</title>
      <link>https://cloudnativelabs.github.io/post/2017-05-22-kube-pod-networking/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
      <author>info@cloudnativelabs.net (Cloudnative Labs)</author>
      <guid>https://cloudnativelabs.github.io/post/2017-05-22-kube-pod-networking/</guid>
      <description>In earlier blog on Kubernetes networking we have seen how Kubernetes is non-prescriptive of how the network should be designed for running pods. There can be multiple way to design the network that meets Kubernetes networking requirements with varying degree of complexity, flexibility. In this blog we will see how Kube-router implements a pure L3 solution for cross node pod-to-pod networking using BGP and see how use of BGP gives unique advantage which enables pod IP and Kubernetes service cluster IP to be routable from out side of the cluster.</description>
    </item>
    
    <item>
      <title>Kubernetes network services proxy with IPVS/LVS</title>
      <link>https://cloudnativelabs.github.io/post/2017-05-10-kube-network-service-proxy/</link>
      <pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate>
      <author>info@cloudnativelabs.net (Cloudnative Labs)</author>
      <guid>https://cloudnativelabs.github.io/post/2017-05-10-kube-network-service-proxy/</guid>
      <description>A Kubernetes Service is an abstraction which groups a logical set of Pods that provide the same functionality. A service in Kubernetes can be of different types, of which &amp;lsquo;ClusterIP&amp;rsquo; and &amp;lsquo;NodePort&amp;rsquo; types forms basis for service discovery and load balancing. Both of the service types requires a service proxy running on each of the cluster node. Kubernetes has an implementation of service proxy &amp;lsquo;Kube-proxy&amp;rsquo; based on iptables. While Kube-proxy provides out-of-box solution its not necessarily an optimal solution for all users.</description>
    </item>
    
    <item>
      <title>Enforcing Kubernetes network policies with iptables</title>
      <link>https://cloudnativelabs.github.io/post/2017-05-1-kube-network-policies/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      <author>info@cloudnativelabs.net (Cloudnative Labs)</author>
      <guid>https://cloudnativelabs.github.io/post/2017-05-1-kube-network-policies/</guid>
      <description>Network policies in Kubernetes provides primary means to secure a pod by exerting control over who can connect to pod. Intent of this blog post is not to describe what network policies are but to show how iptables on the the cluster nodes can be used to build a distributed firewall solution that enforces network policies in Kubernetes clusters. This write up draws up from the insights of implementing a network policy controller in Kube-router.</description>
    </item>
    
    <item>
      <title>Kube-router</title>
      <link>https://cloudnativelabs.github.io/post/2017-04-19-kube-router/</link>
      <pubDate>Wed, 19 Apr 2017 00:00:00 +0000</pubDate>
      <author>info@cloudnativelabs.net (Cloudnative Labs)</author>
      <guid>https://cloudnativelabs.github.io/post/2017-04-19-kube-router/</guid>
      <description>In previous blog we went over the Kubernetes service discovery, load balancing and network policies. In this blog we will use Kube-router a distributed load balancer, firewall and router for Kubernetes and demonstrate the Kubernetes networking constructs in action.
We will setup a Kubernetes cluster from scratch and use kube-router instead of kube-proxy and demonstrate how kube-router provides a solution for cross-node pod-to-pod networking, provides a service proxy on each node and load balances the traffic.</description>
    </item>
    
    <item>
      <title>Kubernetes Networking</title>
      <link>https://cloudnativelabs.github.io/post/2017-04-18-kubernetes-networking/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
      <author>info@cloudnativelabs.net (Cloudnative Labs)</author>
      <guid>https://cloudnativelabs.github.io/post/2017-04-18-kubernetes-networking/</guid>
      <description>This article gives brief overview of fundamnetal networking concepts in Kubernetes.
First thing one notices with Kubernetes in comparision to other container orchestration platforms is container itself is not a first class construct in Kubernetes. Containers always exists in the context of pod. So first lets understand the basic Kubernetes building block Pod that consumes network. A pod is a group of one or more containers that are always co-located and co-scheduled, and run in a shared context.</description>
    </item>
    
  </channel>
</rss>